name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies for product-service
        working-directory: ./product-service
        run: npm install

      - name: Install dependencies for customer-service
        working-directory: ./customer-service
        run: npm install

      - name: Run tests for product-service
        working-directory: ./product-service
        run: npm test

      - name: Run tests for customer-service
        working-directory: ./customer-service
        run: npm test

      - name: Check for changes in product-service
        id: check_product_service
        run: |
          git diff --quiet HEAD^ HEAD ./product-service || echo "changes detected"

      - name: Check for changes in customer-service
        id: check_customer_service
        run: |
          git diff --quiet HEAD^ HEAD ./customer-service || echo "changes detected"

      - name: Dockerize product-service
        if: steps.check_product_service.outcome == 'success'
        working-directory: ./product-service
        run: docker build -t product-service:latest .

      - name: Dockerize customer-service
        if: steps.check_customer_service.outcome == 'success'
        working-directory: ./customer-service
        run: docker build -t customer-service:latest .

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Tag and Push Docker images
        if: steps.check_product_service.outcome == 'success' || steps.check_customer_service.outcome == 'success'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker tag product-service:latest "$DOCKER_USERNAME"/product-service:latest
          docker push "$DOCKER_USERNAME"/product-service:latest
          docker tag customer-service:latest "$DOCKER_USERNAME"/customer-service:latest
          docker push "$DOCKER_USERNAME"/customer-service:latest

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Deploy with Docker Compose
        run: |
          docker-compose pull
          docker-compose up -d
